{"version":3,"sources":["components/Home.js","components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Home","console","log","className","to","Square","value","handleClick","onClick","Board","useEffect","fetch","then","res","status","nextPlayer","useState","Array","fill","squares","setSquares","xIsNext","setXIsNext","index","squaresArray","calculateWinner","winningCombinations","i","length","a","b","c","winner","class","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b011217.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './../App.css';\r\n\r\n\r\nconst Home = () =>{\r\n  console.log(\"AA\");\r\n  \r\n  return (\r\n    <div className=\"home\">\r\n      <h1>Tic Tac Toe</h1>\r\n        <Link to=\"/board\" className=\"button\">New Game</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\n\r\nconst Square = ({value, handleClick}) =>{\r\n  return (\r\n    <div>\r\n        <button className=\"cell\" onClick={handleClick}>{value}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square","import React, { useState, useEffect } from 'react';\r\nimport Square from './Square';\r\nimport './../App.css';\r\n\r\n\r\nfunction Board() {\r\n\r\n  useEffect(()=>{\r\n      fetch('178.128.206.150:7000')\r\n        .then(res => {\r\n            console.log(\"status: \"+ res.status);\r\n        });\r\n  },[])\r\n\r\n  \r\n\r\n  const [squares, setSquares] = useState(Array(9).fill(null))\r\n  const [xIsNext, setXIsNext]  = useState(true)\r\n\r\n \r\n    const handleClick = index => {\r\n      let squaresArray = [...squares]\r\n\r\n      if(calculateWinner(squares)) return\r\n      if(squaresArray[index] === null) {\r\n        squaresArray[index] = xIsNext ? \"X\" : \"O\"\r\n        setSquares(squaresArray)\r\n        setXIsNext(!xIsNext)\r\n      }\r\n      \r\n    }\r\n\r\n    const calculateWinner = (squares) => {\r\n      const winningCombinations = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n      ]\r\n\r\n      for (let i = 0; i < winningCombinations.length; i++) {\r\n        const [a, b, c] = winningCombinations[i]\r\n        if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c])\r\n          \r\n          return squares[a]\r\n      }\r\n     return null\r\n    }\r\n    \r\n    let nextPlayer;\r\n    xIsNext===true ? nextPlayer = \"X\" : nextPlayer = \"O\"\r\n    let winner = calculateWinner(squares)\r\n\r\n    nextPlayer = winner ? `Winner is ${winner}` : `Next player: ${nextPlayer}`\r\n    \r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"status\">{nextPlayer}</div>\r\n      \r\n      <div class=\"grid\">\r\n        <Square handleClick={() => handleClick(0)} value={squares[0]}/>\r\n        <Square handleClick={() => handleClick(1)} value={squares[1]}/>\r\n        <Square handleClick={() => handleClick(2)} value={squares[2]}/>\r\n        <Square handleClick={() => handleClick(3)} value={squares[3]}/>\r\n        <Square handleClick={() => handleClick(4)} value={squares[4]}/>\r\n        <Square handleClick={() => handleClick(5)} value={squares[5]}/>\r\n        <Square handleClick={() => handleClick(6)} value={squares[6]}/>\r\n        <Square handleClick={() => handleClick(7)} value={squares[7]}/>\r\n        <Square handleClick={() => handleClick(8)} value={squares[8]}/>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\nexport default Board;\r\n","import React from 'react';\nimport Home from './components/Home';\nimport Board from './components/Board';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <div>\n      \n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/board/\" component={Board} />\n        </Switch>\n      \n    </div>\n  );\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as  Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}